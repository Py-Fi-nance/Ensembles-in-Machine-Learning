# -*- coding: utf-8 -*-
"""Ensembled plots.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u1iugX97QeAzxTU8vtLNd_2twm-PTVQO
"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import networkx as nx

# Setting a theme and style
sns.set_theme(style="whitegrid")
plt.rcParams["axes.edgecolor"] = "0.15"
plt.rcParams["axes.linewidth"]  = 1.25

def plot_bagging():
    G = nx.DiGraph()

    G.add_node('Data', pos=(1, 3), color='blue')
    for i, label in enumerate(['Subset 1', 'Subset 2', 'Subset 3']):
        G.add_node(label, pos=(2, 5-i*2), color='green')
        G.add_edge('Data', label)

        G.add_node(f'Model {i+1}', pos=(3, 5-i*2), color='red')
        G.add_edge(label, f'Model {i+1}')

    G.add_node('Aggregated\nPrediction', pos=(4, 3), color='purple')
    for i in range(3):
        G.add_edge(f'Model {i+1}', 'Aggregated\nPrediction')

    pos = nx.get_node_attributes(G, 'pos')
    color = [G.nodes[node]['color'] for node in G.nodes]

    plt.figure(figsize=(12, 7))
    nx.draw(G, pos, with_labels=True, node_size=4000, node_color=color, font_size=10,
            font_weight='bold', edge_color='0.4', width=1.25, alpha=0.6,
            arrowsize=20)

    plt.title("Bagging (Bootstrap Aggregating)", fontsize=14, fontweight='bold')
    plt.show()

def plot_boosting():
    G = nx.DiGraph()

    prev_model = None
    for i in range(4):
        current_model = f'Model {i+1}'
        G.add_node(current_model, pos=(i+1, 3), color='red')

        if prev_model:
            G.add_edge(prev_model, current_model)
        prev_model = current_model

    pos = nx.get_node_attributes(G, 'pos')
    color = [G.nodes[node]['color'] for node in G.nodes]

    plt.figure(figsize=(12, 7))
    nx.draw(G, pos, with_labels=True, node_size=4000, node_color=color, font_size=10,
            font_weight='bold', edge_color='0.4', width=1.25, alpha=0.6,
            arrowsize=20)

    plt.title("Boosting: Sequential Model Training", fontsize=14, fontweight='bold')
    plt.show()

# Execute the plotting functions
plot_bagging()

plot_boosting()

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import networkx as nx

# Styling
sns.set_style("whitegrid")
plt.rcParams["axes.edgecolor"] = "0.5"
plt.rcParams["axes.linewidth"]  = 1.5

def plot_bagging():
    G = nx.DiGraph()

    G.add_node('Data', pos=(1, 3), color='#1f78b4')
    for i, label in enumerate(['Subset 1', 'Subset 2', 'Subset 3']):
        G.add_node(label, pos=(2, 5-i*2), color='#33a02c')
        G.add_edge('Data', label)

        G.add_node(f'Model {i+1}', pos=(3, 5-i*2), color='#e31a1c')
        G.add_edge(label, f'Model {i+1}')

    G.add_node('Aggregated\nPrediction', pos=(4.5, 3), color='#6a3d9a')
    for i in range(3):
        G.add_edge(f'Model {i+1}', 'Aggregated\nPrediction')

    pos = nx.get_node_attributes(G, 'pos')
    color = [G.nodes[node]['color'] for node in G.nodes]

    plt.figure(figsize=(14, 8))
    nx.draw(G, pos, with_labels=True, node_size=5000, node_color=color,
            font_size=11, font_weight='bold', edge_color='0.4', width=1.5,
            alpha=0.7, arrowsize=25, node_shape="s", edgecolors="#000000", linewidths=1.5)

    plt.title("Bagging (Bootstrap Aggregating)", fontsize=16, fontweight='bold', pad=20)
    plt.show()

def plot_boosting():
    G = nx.DiGraph()

    prev_model = None
    for i in range(4):
        current_model = f'Model {i+1}'
        G.add_node(current_model, pos=(i*1.5+1, 3), color='#e31a1c')

        if prev_model:
            G.add_edge(prev_model, current_model)
        prev_model = current_model

    pos = nx.get_node_attributes(G, 'pos')
    color = [G.nodes[node]['color'] for node in G.nodes]

    plt.figure(figsize=(14, 8))
    nx.draw(G, pos, with_labels=True, node_size=5000, node_color=color,
            font_size=12, font_weight='bold', edge_color='0.4', width=1.5,
            alpha=0.7, arrowsize=25, node_shape="s", edgecolors="#000000", linewidths=1.5)

    plt.title("Boosting: Sequential Model Training", fontsize=16, fontweight='bold', pad=20)
    plt.show()

# Execute the plotting functions
plot_bagging()
plot_boosting()

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import networkx as nx

# Styling
sns.set_style("whitegrid")
plt.rcParams["axes.edgecolor"] = "0.5"
plt.rcParams["axes.linewidth"]  = 1.5

def plot_stacking():
    G = nx.DiGraph()

    # Base models
    for i, label in enumerate(['Model 1', 'Model 2', 'Model 3']):
        G.add_node(label, pos=(1, 5-i*2), color='#e31a1c')

    # Predictions from base models
    for i, label in enumerate(['Pred 1', 'Pred 2', 'Pred 3']):
        G.add_node(label, pos=(2.5, 5-i*2), color='#33a02c')
        G.add_edge(f'Model {i+1}', label)

    # Meta-model making final prediction based on base model predictions
    G.add_node('Meta-Model', pos=(4, 3), color='#1f78b4')
    for i in range(3):
        G.add_edge(f'Pred {i+1}', 'Meta-Model')

    G.add_node('Final\nPrediction', pos=(5.5, 3), color='#6a3d9a')
    G.add_edge('Meta-Model', 'Final\nPrediction')

    pos = nx.get_node_attributes(G, 'pos')
    color = [G.nodes[node]['color'] for node in G.nodes]

    plt.figure(figsize=(16, 8))
    nx.draw(G, pos, with_labels=True, node_size=5000, node_color=color,
            font_size=12, font_weight='bold', edge_color='0.4', width=1.5,
            alpha=0.7, arrowsize=25, node_shape="s", edgecolors="#000000", linewidths=1.5)

    plt.title("Stacking (Stacked Generalization)", fontsize=16, fontweight='bold', pad=20)
    plt.show()

# Execute the plotting function
plot_stacking()

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import networkx as nx

# Styling
sns.set_style("whitegrid")
plt.rcParams["axes.edgecolor"] = "0.5"
plt.rcParams["axes.linewidth"]  = 1.5

def plot_voting():
    G = nx.DiGraph()

    # Base models making their predictions
    for i, label in enumerate(['Model 1', 'Model 2', 'Model 3']):
        G.add_node(label, pos=(1, 5-i*2), color='#e31a1c')

    # Voting mechanism
    G.add_node('Voting\nMechanism', pos=(3, 3), color='#1f78b4')
    for i in range(3):
        G.add_edge(f'Model {i+1}', 'Voting\nMechanism')

    # Final Decision after Voting
    G.add_node('Final\nDecision', pos=(5, 3), color='#6a3d9a')
    G.add_edge('Voting\nMechanism', 'Final\nDecision')

    pos = nx.get_node_attributes(G, 'pos')
    color = [G.nodes[node]['color'] for node in G.nodes]

    plt.figure(figsize=(16, 8))
    nx.draw(G, pos, with_labels=True, node_size=5000, node_color=color,
            font_size=11, font_weight='bold', edge_color='0.4', width=1.5,
            alpha=0.7, arrowsize=25, node_shape="s", edgecolors="#000000", linewidths=1.5)

    plt.title("Voting Mechanism in Ensemble Learning", fontsize=16, fontweight='bold', pad=20)
    plt.show()

# Execute the plotting function
plot_voting()

